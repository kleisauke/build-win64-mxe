This file is part of MXE. See LICENSE.md for licensing information.

Contains ad hoc patches for cross building.

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Thu, 16 Aug 2018 17:00:00 +0200
Subject: [PATCH 1/5] Missing symbol on Windows due to missing IMF_EXPORT


diff --git a/OpenEXR/IlmImf/ImfCRgbaFile.h b/OpenEXR/IlmImf/ImfCRgbaFile.h
index 1111111..2222222 100644
--- a/OpenEXR/IlmImf/ImfCRgbaFile.h
+++ b/OpenEXR/IlmImf/ImfCRgbaFile.h
@@ -441,6 +441,7 @@ int	       	ImfTiledOutputLevelRoundingMode
 struct ImfInputFile;
 typedef struct ImfInputFile ImfInputFile;
 
+IMF_EXPORT 
 ImfInputFile *		ImfOpenInputFile (const char name[]);
 
 IMF_EXPORT 

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kimball Thurston <kdt3rd@gmail.com>
Date: Tue, 5 Nov 2019 21:42:45 +1300
Subject: [PATCH 2/5] Fix #595 and others, issue with pkgconfig generation under
 cmake

autoconf seems to automatically insert the ${prefix} variable reference
when emitting the pkg-config file. Make cmake rules conform to that
pattern.

diff --git a/OpenEXR/config/CMakeLists.txt b/OpenEXR/config/CMakeLists.txt
index 1111111..2222222 100644
--- a/OpenEXR/config/CMakeLists.txt
+++ b/OpenEXR/config/CMakeLists.txt
@@ -72,9 +72,9 @@ if(OPENEXR_INSTALL_PKG_CONFIG)
   # use a helper function to avoid variable pollution, but pretty simple
   function(openexr_pkg_config_help pcinfile)
     set(prefix ${CMAKE_INSTALL_PREFIX})
-    set(exec_prefix ${CMAKE_INSTALL_BINDIR})
-    set(libdir ${CMAKE_INSTALL_LIBDIR})
-    set(includedir ${CMAKE_INSTALL_INCLUDEDIR})
+    set(exec_prefix "\${prefix}")
+    set(libdir "\${exec_prefix}/${CMAKE_INSTALL_LIBDIR}")
+    set(includedir "\${prefix}/${CMAKE_INSTALL_INCLUDEDIR}")
     set(LIB_SUFFIX_DASH ${OPENEXR_LIB_SUFFIX})
     if(TARGET Threads::Threads)
       # hrm, can't use properties as they end up as generator expressions

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Wed, 2 Oct 2019 09:40:00 +0200
Subject: [PATCH 3/5] Fix build errors with MinGW


diff --git a/OpenEXR/IlmImf/CMakeLists.txt b/OpenEXR/IlmImf/CMakeLists.txt
index 1111111..2222222 100644
--- a/OpenEXR/IlmImf/CMakeLists.txt
+++ b/OpenEXR/IlmImf/CMakeLists.txt
@@ -2,7 +2,12 @@
 # Copyright Contributors to the OpenEXR Project.
 
 openexr_define_library(IlmImf
-  PRIV_EXPORT ILMIMF_EXPORTS
+  PRIV_EXPORT
+    ILMIMF_EXPORTS
+    IEX_EXPORTS
+    HALF_EXPORTS
+    IMATH_EXPORTS
+    ILMTHREAD_EXPORTS
   CURDIR ${CMAKE_CURRENT_SOURCE_DIR}
   SOURCES
     ImfAttribute.cpp
diff --git a/OpenEXR/IlmImfExamples/CMakeLists.txt b/OpenEXR/IlmImfExamples/CMakeLists.txt
index 1111111..2222222 100644
--- a/OpenEXR/IlmImfExamples/CMakeLists.txt
+++ b/OpenEXR/IlmImfExamples/CMakeLists.txt
@@ -12,6 +12,7 @@ add_executable(IlmImfExamples
   rgbaInterfaceTiledExamples.cpp
 )
 target_link_libraries(IlmImfExamples OpenEXR::IlmImf)
+target_compile_definitions(IlmImfExamples PRIVATE IEX_EXPORTS HALF_EXPORTS)
 
 # Examples
 install(
diff --git a/OpenEXR/IlmImfUtil/CMakeLists.txt b/OpenEXR/IlmImfUtil/CMakeLists.txt
index 1111111..2222222 100644
--- a/OpenEXR/IlmImfUtil/CMakeLists.txt
+++ b/OpenEXR/IlmImfUtil/CMakeLists.txt
@@ -2,7 +2,10 @@
 # Copyright Contributors to the OpenEXR Project.
 
 openexr_define_library(IlmImfUtil
-  PRIV_EXPORT ILMIMFUTIL_EXPORTS
+  PRIV_EXPORT
+    ILMIMFUTIL_EXPORTS
+    IEX_EXPORTS
+    HALF_EXPORTS
   CURDIR ${CMAKE_CURRENT_SOURCE_DIR}
   SOURCES
     ImfImageChannel.cpp
diff --git a/OpenEXR/config/LibraryDefine.cmake b/OpenEXR/config/LibraryDefine.cmake
index 1111111..2222222 100644
--- a/OpenEXR/config/LibraryDefine.cmake
+++ b/OpenEXR/config/LibraryDefine.cmake
@@ -5,8 +5,8 @@
 # in it, so be careful copying...
 function(OPENEXR_DEFINE_LIBRARY libname)
   set(options)
-  set(oneValueArgs PRIV_EXPORT CURDIR CURBINDIR)
-  set(multiValueArgs SOURCES HEADERS DEPENDENCIES PRIVATE_DEPS)
+  set(oneValueArgs CURDIR CURBINDIR)
+  set(multiValueArgs PRIV_EXPORT SOURCES HEADERS DEPENDENCIES PRIVATE_DEPS)
   cmake_parse_arguments(OPENEXR_CURLIB "${options}" "${oneValueArgs}" "${multiValueArgs}" ${ARGN})
 
   # only do the object library mechanism in a few cases:

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Gregorio Litenstein <g.litenstein@gmail.com>
Date: Sat, 19 Oct 2019 12:01:05 -0300
Subject: [PATCH 4/5] Fix symlink creation on windows.


diff --git a/OpenEXR/config/LibraryDefine.cmake b/OpenEXR/config/LibraryDefine.cmake
index 6946ca94..68ff1efc 100644
--- a/OpenEXR/config/LibraryDefine.cmake
+++ b/OpenEXR/config/LibraryDefine.cmake
@@ -92,12 +92,20 @@ function(OPENEXR_DEFINE_LIBRARY libname)
       DESTINATION ${CMAKE_INSTALL_INCLUDEDIR}/${OPENEXR_OUTPUT_SUBDIR}
   )
   if(BUILD_SHARED_LIBS AND (NOT "${OPENEXR_LIB_SUFFIX}" STREQUAL ""))
-    set(verlibname ${CMAKE_SHARED_LIBRARY_PREFIX}${libname}${OPENEXR_LIB_SUFFIX}${CMAKE_SHARED_LIBRARY_SUFFIX})
-    set(baselibname ${CMAKE_SHARED_LIBRARY_PREFIX}${libname}${CMAKE_SHARED_LIBRARY_SUFFIX})
-    install(CODE "execute_process(COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_INSTALL_FULL_LIBDIR} ${CMAKE_COMMAND} -E create_symlink ${verlibname} ${baselibname})")
-    install(CODE "message(\"-- Creating symlink in ${CMAKE_INSTALL_FULL_LIBDIR} ${baselibname} -> ${verlibname}\")")
+    set(verlibname ${CMAKE_SHARED_LIBRARY_PREFIX}${libname}${OPENEXR_LIB_SUFFIX})
+    set(baselibname ${CMAKE_SHARED_LIBRARY_PREFIX}${libname})
+    if (WIN32)
+      set(fullinstallpath "${CMAKE_INSTALL_FULL_BINDIR}")
+      install(CODE "execute_process(COMMAND ${CMAKE_COMMAND} -E chdir ${CMAKE_INSTALL_FULL_LIBDIR} ${CMAKE_COMMAND} -E create_symlink ${verlibname}${CMAKE_IMPORT_LIBRARY_SUFFIX} ${baselibname}${CMAKE_IMPORT_LIBRARY_SUFFIX})")
+      install(CODE "message(\"-- Creating symlink in ${CMAKE_INSTALL_FULL_LIBDIR} ${baselibname}${CMAKE_IMPORT_LIBRARY_SUFFIX} -> ${verlibname}${CMAKE_IMPORT_LIBRARY_SUFFIX}\")")
+    else()
+      set(fullinstallpath "${CMAKE_INSTALL_FULL_LIBDIR}")
+    endif()
+    install(CODE "execute_process(COMMAND ${CMAKE_COMMAND} -E chdir ${fullinstallpath} ${CMAKE_COMMAND} -E create_symlink ${verlibname}${CMAKE_SHARED_LIBRARY_SUFFIX} ${baselibname}${CMAKE_SHARED_LIBRARY_SUFFIX})")
+    install(CODE "message(\"-- Creating symlink in ${fullinstallpath} ${baselibname}${CMAKE_SHARED_LIBRARY_SUFFIX} -> ${verlibname}${CMAKE_SHARED_LIBRARY_SUFFIX}\")")
     set(verlibname)
     set(baselibname)
+    set(fullinstallpath)
   endif()
 
   if(OPENEXR_BUILD_BOTH_STATIC_SHARED)

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Gregorio Litenstein <g.litenstein@gmail.com>
Date: Wed, 16 Oct 2019 22:17:21 -0300
Subject: [PATCH 5/5] Check for eLut.h and toFloat.h before making them

From: https://github.com/openexr/openexr/pull/597

diff --git a/OpenEXR/IlmImf/CMakeLists.txt b/OpenEXR/IlmImf/CMakeLists.txt
index 165fed7f..349c5781 100644
--- a/OpenEXR/IlmImf/CMakeLists.txt
+++ b/OpenEXR/IlmImf/CMakeLists.txt
@@ -1,30 +1,47 @@
 # SPDX-License-Identifier: BSD-3-Clause
 # Copyright Contributors to the OpenEXR Project.
 
-add_executable(b44ExpLogTable b44ExpLogTable.cpp)
-target_link_libraries(b44ExpLogTable PRIVATE OpenEXR::Config IlmBase::Half IlmBase::IlmThread IlmBase::Iex)
-set_target_properties(b44ExpLogTable PROPERTIES
-  RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin"
-)
-# TODO: Old file had logic to skip these if the file already exists
-add_custom_command(
-  OUTPUT  ${CMAKE_CURRENT_BINARY_DIR}/b44ExpLogTable.h
-  COMMAND $<TARGET_FILE:b44ExpLogTable> > ${CMAKE_CURRENT_BINARY_DIR}/b44ExpLogTable.h
-  DEPENDS b44ExpLogTable
-)
+check_include_files(${CMAKE_CURRENT_BINARY_DIR}/b44ExpLogTable.h HAVE_B44_EXP_LOG_TABLE_H)
+check_include_files(${CMAKE_CURRENT_BINARY_DIR}/dwaLookups.h HAVE_DWA_LOOKUPS_H)
 
+if((NOT HAVE_B44_EXP_LOG_TABLE_H) OR (NOT HAVE_DWA_LOOKUPS_H))
+  if(CMAKE_CROSSCOMPILING)
+    message(STATUS "We're cross-compiling; will use native executables from a previous build to generate b44ExpLogTable.h and dwaLookups.h")
+    set(NATIVE_OPENEXR_BUILD_DIR "NATIVE_OPENEXR-NOTFOUND" CACHE FILEPATH "Point it to the build folder of a native build.")
+    if (NATIVE_OPENEXR_BUILD_DIR)
+      set (b44ExpLogTable_PATH "${NATIVE_OPENEXR_BUILD_DIR}/bin/b44ExpLogTable")
+      set (dwaLookups_PATH "${NATIVE_OPENEXR_BUILD_DIR}/bin/dwaLookups")
+    else()
+      message(FATAL_ERROR "Missing path to native build directory.")
+    endif()
+   else()
+    add_executable(b44ExpLogTable b44ExpLogTable.cpp)
+    target_link_libraries(b44ExpLogTable PRIVATE OpenEXR::Config IlmBase::Half IlmBase::IlmThread IlmBase::Iex)
+    set_target_properties(b44ExpLogTable PROPERTIES
+      RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin"
+    )
+    target_compile_features(b44ExpLogTable PUBLIC cxx_std_${OPENEXR_CXX_STANDARD})
+    
+    add_executable(dwaLookups dwaLookups.cpp)
+    target_link_libraries(dwaLookups PRIVATE OpenEXR::Config IlmBase::Imath IlmBase::Half IlmBase::IlmThread IlmBase::Iex)
+    set_target_properties(dwaLookups PROPERTIES
+     RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin"
+    )
+    
+    set (b44ExpLogTable_PATH "$<TARGET_FILE:b44ExpLogTable>")
+    set (dwaLookups_PATH "$<TARGET_FILE:dwaLookups>")
+   endif()
+    add_custom_command(
+      OUTPUT
+        ${CMAKE_CURRENT_BINARY_DIR}/b44ExpLogTable.h
+        ${CMAKE_CURRENT_BINARY_DIR}/dwaLookups.h
+      COMMAND "${b44ExpLogTable_PATH}" ARGS > "${CMAKE_CURRENT_BINARY_DIR}/b44ExpLogTable.h"
+      COMMAND "${dwaLookups_PATH}" ARGS > "${CMAKE_CURRENT_BINARY_DIR}/dwaLookups.h"
+      DEPENDS $<$<NOT:$<BOOL:${CMAKE_CROSSCOMPILING}>>:b44ExpLogTable>
+      DEPENDS $<$<NOT:$<BOOL:${CMAKE_CROSSCOMPILING}>>:dwaLookups>
+    )
+endif()
 
-add_executable(dwaLookups dwaLookups.cpp)
-target_link_libraries(dwaLookups PRIVATE OpenEXR::Config IlmBase::Imath IlmBase::Half IlmBase::IlmThread IlmBase::Iex)
-set_target_properties(dwaLookups PROPERTIES
-  RUNTIME_OUTPUT_DIRECTORY "${CMAKE_BINARY_DIR}/bin"
-)
-# TODO: Old file had logic to skip these if the file already exists
-add_custom_command(
-  OUTPUT  ${CMAKE_CURRENT_BINARY_DIR}/dwaLookups.h
-  COMMAND $<TARGET_FILE:dwaLookups> > ${CMAKE_CURRENT_BINARY_DIR}/dwaLookups.h
-  DEPENDS dwaLookups
-)
 
 openexr_define_library(IlmImf
   PRIV_EXPORT ILMIMF_EXPORTS
