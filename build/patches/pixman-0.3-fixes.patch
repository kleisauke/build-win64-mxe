This file is part of MXE. See LICENSE.md for licensing information.

Contains ad hoc patches for cross building.

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Basile Clement <basile-pixman@clement.pm>
Date: Tue, 9 Apr 2019 23:16:13 +0200
Subject: [PATCH 1/5] Fix bilinear filter computation in wide pipeline

The recently introduced wide pipeline for filters has a typo which
causes it to improperly compute bilinear interpolation positions,
causing various glitches when enabled.

This patch uses the proper computation for bilinear interpolation in the
wide pipeline.  It also makes related `if` statements conformant to the
CODING_STYLE:

* If a substatement spans multiple lines, then there must be braces
  around it.

* If one substatement of an if statement has braces, then the other
  must too.

Signed-off-by: Maarten Lankhorst <maarten.lankhorst@linux.intel.com>

diff --git a/pixman/pixman-bits-image.c b/pixman/pixman-bits-image.c
index 1111111..2222222 100644
--- a/pixman/pixman-bits-image.c
+++ b/pixman/pixman-bits-image.c
@@ -432,29 +432,38 @@ bits_image_fetch_pixel_filtered (bits_image_t  *image,
 
     case PIXMAN_FILTER_CONVOLUTION:
 	if (wide)
+	{
 	    bits_image_fetch_pixel_convolution (image, x, y,
 						get_pixel, out,
 						accum_float,
 						reduce_float);
+	}
 	else
+	{
 	    bits_image_fetch_pixel_convolution (image, x, y,
 						get_pixel, out,
 						accum_32, reduce_32);
+	}
 	break;
 
     case PIXMAN_FILTER_SEPARABLE_CONVOLUTION:
 	if (wide)
+	{
 	    bits_image_fetch_pixel_separable_convolution (image, x, y,
 							  get_pixel, out,
 							  accum_float,
 							  reduce_float);
+	}
 	else
+	{
 	    bits_image_fetch_pixel_separable_convolution (image, x, y,
 							  get_pixel, out,
 							  accum_32, reduce_32);
+	}
         break;
 
     default:
+	assert (0);
         break;
     }
 }
diff --git a/pixman/pixman-inlines.h b/pixman/pixman-inlines.h
index 1111111..2222222 100644
--- a/pixman/pixman-inlines.h
+++ b/pixman/pixman-inlines.h
@@ -231,7 +231,7 @@ bilinear_interpolation_float (argb_t tl, argb_t tr,
     argb_t r;
 
     distxy = distx * disty;
-    distxiy = distx - (1.f - distxy);
+    distxiy = distx * (1.f - disty);
     distixy = (1.f - distx) * disty;
     distixiy = (1.f - distx) * (1.f - disty);
 
From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Christoph Reiter <reiter.christoph@gmail.com>
Date: Sat, 11 May 2019 10:17:36 +0200
Subject: [PATCH 2/5] meson: define SIZEOF_LONG  and use -Wundef

meson builds defaulted to SIZEOF_LONG=0 in various places

diff --git a/meson.build b/meson.build
index 1111111..2222222 100644
--- a/meson.build
+++ b/meson.build
@@ -36,6 +36,7 @@ add_project_arguments(
     '-Wdeclaration-after-statement',
     '-fno-strict-aliasing',
     '-fvisibility=hidden',
+    '-Wundef',
   ]),
   language : ['c']
 )
@@ -445,6 +446,8 @@ if host_machine.endian() == 'big'
   config.set('WORDS_BIGENDIAN', 1)
 endif
 
+config.set('SIZEOF_LONG', cc.sizeof('long'))
+
 # Required to make pixman-private.h
 config.set('PACKAGE', 'foo')
 
From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Christoph Reiter <reiter.christoph@gmail.com>
Date: Sat, 11 May 2019 11:18:35 +0200
Subject: [PATCH 3/5] meson: allow building a static library

So that passing "-Ddefault_library=both" also creates a static lib.

Note that Libs.private in the .pc file will still be wrong because of
https://github.com/mesonbuild/meson/issues/3934 (it contains things like
-lpixman-mmx)

diff --git a/pixman/meson.build b/pixman/meson.build
index 1111111..2222222 100644
--- a/pixman/meson.build
+++ b/pixman/meson.build
@@ -97,7 +97,7 @@ pixman_files = files(
   'pixman-utils.c',
 )
 
-libpixman = shared_library(
+libpixman = library(
   'pixman-1',
   [pixman_files, config_h, version_h],
   link_with : [pixman_simd_libs],

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Christoph Reiter <reiter.christoph@gmail.com>
Date: Sat, 11 May 2019 10:23:08 +0200
Subject: [PATCH 4/5] meson: fix TLS support under mingw

GCC on Windows complains that "__declspec(thread)" doesn't work, but still
compiles it, so the meson check doesn't work. The warning printed by gcc:
"warning: 'thread' attribute directive ignored [-Wattributes]"

Pass -Werror=attributes to make the check fail instead.

This fixes the test suite (minus gtk tests) on Windows with mingw.

diff --git a/meson.build b/meson.build
index 1111111..2222222 100644
--- a/meson.build
+++ b/meson.build
@@ -408,8 +408,12 @@ foreach h : ['sys/mman.h', 'fenv.h', 'unistd.h']
   endif
 endforeach
 
+# gcc on Windows only warns that __declspec(thread) isn't supported,
+# passing -Werror=attributes makes it fail.
 if (host_machine.system() == 'windows' and
-    cc.compiles('int __declspec(thread) foo;', name : 'TLS via __declspec(thread)'))
+    cc.compiles('int __declspec(thread) foo;',
+                args : cc.get_supported_arguments(['-Werror=attributes']),
+                name : 'TLS via __declspec(thread)'))
   config.set('TLS', '__declspec(thread)')
 elif cc.compiles('int __thread foo;', name : 'TLS via __thread')
   config.set('TLS', '__thread')

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Chun-wei Fan <fanchunwei@src.gnome.org>
Date: Wed, 24 Jul 2019 14:44:39 +0800
Subject: [PATCH 5/5] build: Don't assume PThreads if threading support is found

Look also for pthread.h if threading support is found by Meson, as the
underlying threading support may not be PThreads, depending on platform.

For now, disable the thread-test test program if pthread.h and if
necessary, the PThreads library, cannot be found, as the current
implementation assumes the use of PThreads.

Also bump the required Meson version to 0.50.0 since we need it for
-cc.get_argument_syntax()
-For a later commit, the has_headers sub-method for cc.find_library()

diff --git a/meson.build b/meson.build
index 1111111..2222222 100644
--- a/meson.build
+++ b/meson.build
@@ -23,7 +23,7 @@ project(
   ['c'],
   version : '0.38.5',
   license : 'MIT',
-  meson_version : '>= 0.47.2',
+  meson_version : '>= 0.50.0',
   default_options : ['buildtype=debugoptimized'],
 )
 
@@ -393,7 +393,29 @@ if dep_png.found()
 endif
 dep_m = cc.find_library('m', required : false)
 dep_threads = dependency('threads')
-if dep_threads.found()
+
+# MSVC-style compilers do not come with pthreads, so we must link
+# to it explicitly, currently pthreads-win32 is supported
+pthreads_found = false
+
+if dep_threads.found() and cc.has_header('pthread.h')
+  if cc.get_argument_syntax() == 'msvc'
+    pthread_lib = null_dep
+    foreach pthread_type : ['VC3', 'VSE3', 'VCE3', 'VC2', 'VSE2', 'VCE2']
+      if not pthread_lib.found()
+        pthread_lib = cc.find_library('pthread@0@'.format(pthread_type), required : false)
+      endif
+    endforeach
+    if pthread_lib.found()
+      pthreads_found = true
+      dep_threads = pthread_lib
+    endif
+  else
+    pthreads_found = true
+  endif
+endif
+
+if pthreads_found
   config.set('HAVE_PTHREADS', 1)
 endif
 
diff --git a/test/meson.build b/test/meson.build
index 1111111..2222222 100644
--- a/test/meson.build
+++ b/test/meson.build
@@ -34,7 +34,6 @@ tests = [
   'scaling-crash-test',
   'alpha-loop',
   'scaling-helpers-test',
-  'thread-test',
   'rotate-test',
   'alphamap',
   'gradient-crash-test',
@@ -54,6 +53,12 @@ tests = [
   'tolerance-test',
 ]
 
+# Remove/update this once thread-test.c supports threading methods
+# other than PThreads
+if pthreads_found
+  tests += 'thread-test'
+endif
+
 progs = [
   'lowlevel-blt-bench',
   'radial-perf-test',
