From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Wed, 16 Oct 2019 10:20:00 +0200
Subject: [PATCH 1/2] Add png stream save to operation init


diff --git a/libvips/foreign/foreign.c b/libvips/foreign/foreign.c
index 1111111..2222222 100644
--- a/libvips/foreign/foreign.c
+++ b/libvips/foreign/foreign.c
@@ -1988,6 +1988,7 @@ vips_foreign_operation_init( void )
 	extern GType vips_foreign_load_png_stream_get_type( void ); 
 	extern GType vips_foreign_save_png_file_get_type( void ); 
 	extern GType vips_foreign_save_png_buffer_get_type( void ); 
+	extern GType vips_foreign_save_png_stream_get_type( void ); 
 	extern GType vips_foreign_load_csv_get_type( void ); 
 	extern GType vips_foreign_save_csv_get_type( void ); 
 	extern GType vips_foreign_load_matrix_get_type( void ); 
@@ -2107,6 +2108,7 @@ vips_foreign_operation_init( void )
 	vips_foreign_load_png_buffer_get_type(); 
 	vips_foreign_save_png_file_get_type(); 
 	vips_foreign_save_png_buffer_get_type(); 
+	vips_foreign_save_png_stream_get_type(); 
 #endif /*HAVE_PNG*/
 
 #ifdef HAVE_MATIO

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Thu, 17 Oct 2019 12:45:00 +0200
Subject: [PATCH 2/2] Add helpers to override the virtual stream functions


diff --git a/libvips/include/vips/stream.h b/libvips/include/vips/stream.h
index 1111111..2222222 100644
--- a/libvips/include/vips/stream.h
+++ b/libvips/include/vips/stream.h
@@ -160,6 +160,11 @@ typedef struct _VipsStreamInput {
 
 } VipsStreamInput;
 
+typedef ssize_t *(*VipsStreamInputReadFn)( VipsStreamInput *, unsigned char *, size_t );
+typedef const void * *(*VipsStreamInputMapFn)( VipsStreamInput *, size_t * );
+typedef off_t *(*VipsStreamInputSeekFn)( VipsStreamInput *, off_t offset, int );
+typedef void *(*VipsStreamInputMinimiseFn)( VipsStreamInput * );
+
 typedef struct _VipsStreamInputClass {
 	VipsStreamClass parent_class;
 
@@ -171,7 +176,7 @@ typedef struct _VipsStreamInputClass {
 	 *
 	 * -1 on error, 0 on EOF.
 	 */
-	ssize_t (*read)( VipsStreamInput *, unsigned char *, size_t );
+	VipsStreamInputReadFn read;
 
 	/* Map the entire stream into memory, for example with mmap(). Return
 	 * the base and size of the mapped area.
@@ -181,11 +186,11 @@ typedef struct _VipsStreamInputClass {
 	 *
 	 * NULL on error.
 	 */
-	const void *(*map)( VipsStreamInput *, size_t * );
+	VipsStreamInputMapFn map;
 
 	/* Seek to a certain position, args exactly as lseek(2).
 	 */
-	off_t (*seek)( VipsStreamInput *, off_t offset, int );
+	VipsStreamInputSeekFn seek;
 
 	/* Shut down anything that can safely restarted. For example, if
 	 * there's a fd that supports lseek(), it can be closed, since later 
@@ -194,7 +199,7 @@ typedef struct _VipsStreamInputClass {
 	 *
 	 * Non-restartable shutdown shuld be in _finalize().
 	 */
-	void (*minimise)( VipsStreamInput * );
+	VipsStreamInputMinimiseFn minimise;
 
 } VipsStreamInputClass;
 
@@ -207,6 +212,15 @@ VipsStreamInput *vips_stream_input_new_from_memory( const void *data,
 	size_t size );
 VipsStreamInput *vips_stream_input_new_from_options( const char *options );
 
+void vips_stream_input_set_custom_read_fn( VipsStreamInput *input, 
+	VipsStreamInputReadFn read_fn );
+void vips_stream_input_set_custom_map_fn( VipsStreamInput *input, 
+	VipsStreamInputMapFn map_fn );
+void vips_stream_input_set_custom_seek_fn( VipsStreamInput *input, 
+	VipsStreamInputSeekFn seek_fn );
+void vips_stream_input_set_custom_minimise_fn( VipsStreamInput *input, 
+	VipsStreamInputMinimiseFn minimise_fn );
+
 ssize_t vips_stream_input_read( VipsStreamInput *input, 
 	unsigned char *data, size_t length );
 const void *vips_stream_input_map( VipsStreamInput *input, size_t *length );
@@ -249,17 +263,20 @@ typedef struct _VipsStreamOutput {
 
 } VipsStreamOutput;
 
+typedef ssize_t *(*VipsStreamOutputWriteFn)( VipsStreamOutput *, const unsigned char *, size_t );
+typedef void *(*VipsStreamOutputFinishFn)( VipsStreamOutput * );
+
 typedef struct _VipsStreamOutputClass {
 	VipsStreamClass parent_class;
 
 	/* If defined, output some bytes with this. Otherwise use write().
 	 */
-	ssize_t (*write)( VipsStreamOutput *, const unsigned char *, size_t );
+	VipsStreamOutputWriteFn write;
 
 	/* A complete output image has been generated, so do any clearing up,
 	 * eg. copy the bytes we saved in memory to the output blob.
 	 */
-	void (*finish)( VipsStreamOutput * );
+	VipsStreamOutputFinishFn finish;
 
 } VipsStreamOutputClass;
 
@@ -268,6 +285,12 @@ GType vips_stream_output_get_type( void );
 VipsStreamOutput *vips_stream_output_new_from_descriptor( int descriptor );
 VipsStreamOutput *vips_stream_output_new_from_filename( const char *filename );
 VipsStreamOutput *vips_stream_output_new_memory( void );
+
+void vips_stream_output_set_custom_write_fn( VipsStreamOutput *output, 
+	VipsStreamOutputWriteFn write_fn );
+void vips_stream_output_set_custom_finish_fn( VipsStreamOutput *output, 
+	VipsStreamOutputFinishFn finish_fn );
+
 int vips_stream_output_write( VipsStreamOutput *output,
 	const unsigned char *data, size_t length );
 void vips_stream_output_finish( VipsStreamOutput *output );
diff --git a/libvips/iofuncs/stream.c b/libvips/iofuncs/stream.c
index 1111111..2222222 100644
--- a/libvips/iofuncs/stream.c
+++ b/libvips/iofuncs/stream.c
@@ -381,6 +381,42 @@ vips_stream_input_minimise_real( VipsStreamInput *input )
 		vips_stream_close( stream );
 }
 
+void
+vips_stream_input_set_custom_read_fn( VipsStreamInput *input, 
+	VipsStreamInputReadFn read_fn )
+{
+	VipsStreamInputClass *class = VIPS_STREAM_INPUT_GET_CLASS( input );
+
+	class->read = read_fn;
+}
+
+void
+vips_stream_input_set_custom_map_fn( VipsStreamInput *input, 
+	VipsStreamInputMapFn map_fn )
+{
+	VipsStreamInputClass *class = VIPS_STREAM_INPUT_GET_CLASS( input );
+
+	class->map = map_fn;
+}
+
+void
+vips_stream_input_set_custom_seek_fn( VipsStreamInput *input, 
+	VipsStreamInputSeekFn seek_fn )
+{
+	VipsStreamInputClass *class = VIPS_STREAM_INPUT_GET_CLASS( input );
+
+	class->seek = seek_fn;
+}
+
+void
+vips_stream_input_set_custom_minimise_fn( VipsStreamInput *input, 
+	VipsStreamInputMinimiseFn minimise_fn )
+{
+	VipsStreamInputClass *class = VIPS_STREAM_INPUT_GET_CLASS( input );
+
+	class->minimise = minimise_fn;
+}
+
 static void
 vips_stream_input_class_init( VipsStreamInputClass *class )
 {
@@ -408,6 +444,13 @@ vips_stream_input_class_init( VipsStreamInputClass *class )
 		G_STRUCT_OFFSET( VipsStreamInput, blob ),
 		VIPS_TYPE_BLOB );
 
+	VIPS_ARG_BOOL( class, "seekable", 4, 
+		_( "Seekable" ),
+		_( "stream supports seeking" ),
+		VIPS_ARGUMENT_OPTIONAL_INPUT, 
+		G_STRUCT_OFFSET( VipsStreamInput, seekable ),
+		FALSE );
+
 }
 
 static void
@@ -898,6 +941,24 @@ vips_stream_output_finish_real( VipsStreamOutput *output )
 	}
 }
 
+void
+vips_stream_output_set_custom_write_fn( VipsStreamOutput *output, 
+	VipsStreamOutputWriteFn write_fn )
+{
+	VipsStreamOutputClass *class = VIPS_STREAM_OUTPUT_GET_CLASS( output );
+
+	class->write = write_fn;
+}
+
+void
+vips_stream_output_set_custom_finish_fn( VipsStreamOutput *output, 
+	VipsStreamOutputFinishFn finish_fn )
+{
+	VipsStreamOutputClass *class = VIPS_STREAM_OUTPUT_GET_CLASS( output );
+
+	class->finish = finish_fn;
+}
+
 static void
 vips_stream_output_class_init( VipsStreamOutputClass *class )
 {
