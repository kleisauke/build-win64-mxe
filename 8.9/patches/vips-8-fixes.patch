From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Tue, 29 Oct 2019 14:15:00 +0100
Subject: [PATCH 1/4] Add helpers to override the virtual stream functions


diff --git a/libvips/include/vips/stream.h b/libvips/include/vips/stream.h
index 1111111..2222222 100644
--- a/libvips/include/vips/stream.h
+++ b/libvips/include/vips/stream.h
@@ -177,6 +177,9 @@ typedef struct _VipsStreami {
 
 } VipsStreami;
 
+typedef ssize_t (*VipsStreamiReadFn)( VipsStreami *, void *, size_t );
+typedef gint64 (*VipsStreamiSeekFn)( VipsStreami *, gint64 offset, int );
+
 typedef struct _VipsStreamiClass {
 	VipsStreamClass parent_class;
 
@@ -186,14 +189,14 @@ typedef struct _VipsStreamiClass {
 	/* Read from the stream into the supplied buffer, args exactly as
 	 * read(2).
 	 */
-	ssize_t (*read)( VipsStreami *, void *, size_t );
+	VipsStreamiReadFn read;
 
 	/* Seek to a certain position, args exactly as lseek(2). 
 	 *
 	 * Unseekable streams should just return -1. VipsStreami will then
 	 * seek by _read()ing bytes into memory as required.
 	 */
-	gint64 (*seek)( VipsStreami *, gint64 offset, int );
+	VipsStreamiSeekFn seek;
 
 } VipsStreamiClass;
 
@@ -205,6 +208,11 @@ VipsStreami *vips_streami_new_from_blob( VipsBlob *blob );
 VipsStreami *vips_streami_new_from_memory( const void *data, size_t size );
 VipsStreami *vips_streami_new_from_options( const char *options );
 
+void vips_streami_set_custom_read_fn( VipsStreami *streami, 
+	VipsStreamiReadFn read_fn );
+void vips_streami_set_custom_seek_fn( VipsStreami *streami, 
+	VipsStreamiSeekFn seek_fn );
+
 void vips_streami_minimise( VipsStreami *streami );
 int vips_streami_unminimise( VipsStreami *streami );
 int vips_streami_decode( VipsStreami *streami );
@@ -247,17 +255,20 @@ typedef struct _VipsStreamo {
 
 } VipsStreamo;
 
+typedef ssize_t (*VipsStreamoWriteFn)( VipsStreamo *, const void *, size_t  );
+typedef void (*VipsStreamoFinishFn)( VipsStreamo * );
+
 typedef struct _VipsStreamoClass {
 	VipsStreamClass parent_class;
 
 	/* If defined, output some bytes with this. Otherwise use write().
 	 */
-	ssize_t (*write)( VipsStreamo *, const void *, size_t );
+	VipsStreamoWriteFn write;
 
 	/* A complete output image has been generated, so do any clearing up,
 	 * eg. copy the bytes we saved in memory to the stream blob.
 	 */
-	void (*finish)( VipsStreamo * );
+	VipsStreamoFinishFn finish;
 
 } VipsStreamoClass;
 
@@ -269,6 +280,11 @@ VipsStreamo *vips_streamo_new_memory( void );
 int vips_streamo_write( VipsStreamo *streamo, const void *data, size_t length );
 void vips_streamo_finish( VipsStreamo *streamo );
 
+void vips_streamo_set_custom_write_fn( VipsStreamo *streamo, 
+	VipsStreamoWriteFn write_fn );
+void vips_streamo_set_custom_finish_fn( VipsStreamo *streamo, 
+	VipsStreamoFinishFn finish_fn );
+
 #ifdef __cplusplus
 }
 #endif /*__cplusplus*/
diff --git a/libvips/iofuncs/streami.c b/libvips/iofuncs/streami.c
index 1111111..2222222 100644
--- a/libvips/iofuncs/streami.c
+++ b/libvips/iofuncs/streami.c
@@ -304,6 +304,24 @@ vips_streami_seek_real( VipsStreami *streami, gint64 offset, int whence )
 	return( new_pos );
 }
 
+void
+vips_streami_set_custom_read_fn( VipsStreami *streami, 
+	VipsStreamiReadFn read_fn )
+{
+	VipsStreamiClass *class = VIPS_STREAMI_GET_CLASS( streami );
+
+	class->read = read_fn;
+}
+
+void
+vips_streami_set_custom_seek_fn( VipsStreami *streami, 
+	VipsStreamiSeekFn seek_fn )
+{
+	VipsStreamiClass *class = VIPS_STREAMI_GET_CLASS( streami );
+
+	class->seek = seek_fn;
+}
+
 static void
 vips_streami_class_init( VipsStreamiClass *class )
 {
@@ -329,6 +347,13 @@ vips_streami_class_init( VipsStreamiClass *class )
 		G_STRUCT_OFFSET( VipsStreami, blob ),
 		VIPS_TYPE_BLOB );
 
+	VIPS_ARG_BOOL( class, "is_pipe", 4, 
+		_( "Is pipe" ),
+		_( "stream is a pipe-style input" ),
+		VIPS_ARGUMENT_OPTIONAL_INPUT, 
+		G_STRUCT_OFFSET( VipsStreami, is_pipe ),
+		FALSE );
+
 }
 
 static void
diff --git a/libvips/iofuncs/streamo.c b/libvips/iofuncs/streamo.c
index 1111111..2222222 100644
--- a/libvips/iofuncs/streamo.c
+++ b/libvips/iofuncs/streamo.c
@@ -190,6 +190,24 @@ vips_streamo_finish_real( VipsStreamo *streamo )
 	}
 }
 
+void
+vips_streamo_set_custom_write_fn( VipsStreamo *streamo, 
+	VipsStreamoWriteFn write_fn )
+{
+	VipsStreamoClass *class = VIPS_STREAMO_GET_CLASS( streamo );
+
+	class->write = write_fn;
+}
+
+void
+vips_streamo_set_custom_finish_fn( VipsStreamo *streamo, 
+	VipsStreamoFinishFn finish_fn )
+{
+	VipsStreamoClass *class = VIPS_STREAMO_GET_CLASS( streamo );
+
+	class->finish = finish_fn;
+}
+
 static void
 vips_streamo_class_init( VipsStreamoClass *class )
 {

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Mon, 28 Oct 2019 18:04:32 +0100
Subject: [PATCH 2/4] Don't signal pixel decode phase on header read


diff --git a/libvips/foreign/jpeg2vips.c b/libvips/foreign/jpeg2vips.c
index 1111111..2222222 100644
--- a/libvips/foreign/jpeg2vips.c
+++ b/libvips/foreign/jpeg2vips.c
@@ -971,8 +971,12 @@ vips__jpeg_read_stream( VipsStreami *input, VipsImage *out,
 		return( -1 );
 
 	if( readjpeg_open_input( jpeg ) ||
-		vips__jpeg_read( jpeg, out, header_only ) ||
-		vips_streami_decode( jpeg->input ) )
+		vips__jpeg_read( jpeg, out, header_only ) )
+		return( -1 );
+
+	if( header_only )
+		vips_streami_minimise( jpeg->input );
+	else if( vips_streami_decode( jpeg->input ) )
 		return( -1 );
 
 	return( 0 );
diff --git a/libvips/foreign/vipspng.c b/libvips/foreign/vipspng.c
index 1111111..2222222 100644
--- a/libvips/foreign/vipspng.c
+++ b/libvips/foreign/vipspng.c
@@ -711,10 +711,11 @@ vips__png_header_stream( VipsStreami *input, VipsImage *out )
 	Read *read;
 
 	if( !(read = read_new( input, out, TRUE )) ||
-		png2vips_header( read, out ) || 
-		vips_streami_decode( input ) )
+		png2vips_header( read, out ) )
 		return( -1 );
 
+	vips_streami_minimise( input );
+
 	return( 0 );
 }
 
From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Mon, 28 Oct 2019 18:07:08 +0100
Subject: [PATCH 3/4] Ensure target == -1 works


diff --git a/libvips/iofuncs/streami.c b/libvips/iofuncs/streami.c
index 1111111..2222222 100644
--- a/libvips/iofuncs/streami.c
+++ b/libvips/iofuncs/streami.c
@@ -730,7 +730,7 @@ vips_streami_read( VipsStreami *streami, void *buffer, size_t length )
 	return( bytes_read );
 }
 
-/* Read to a position. -1 means read to end of stream. Does not chenge 
+/* Read to a position. -1 means read to end of stream. Does not change 
  * read_position.
  */
 static int
@@ -745,7 +745,7 @@ vips_streami_pipe_read_to_position( VipsStreami *streami, gint64 target )
 	g_assert( !streami->decode );
 	g_assert( streami->header_bytes );
 
-	if( target < 0 ||
+	if( (target != -1 && target < 0) ||
 		(streami->length != -1 && 
 		 target > streami->length) ) {
 		vips_error( vips_stream_nick( VIPS_STREAM( streami ) ), 

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Mon, 28 Oct 2019 18:16:23 +0100
Subject: [PATCH 4/4] Test the properties also for subclass streams

is_pipe can also be tested for non-file based input.

diff --git a/libvips/iofuncs/streami.c b/libvips/iofuncs/streami.c
index 1111111..2222222 100644
--- a/libvips/iofuncs/streami.c
+++ b/libvips/iofuncs/streami.c
@@ -238,26 +238,20 @@ vips_streami_build( VipsObject *object )
 
 		streami->data = vips_blob_get( streami->blob, &length );
 		streami->length = VIPS_MIN( length, G_MAXSSIZE );
-	}
-
-	/* If there's a descriptor for streami, test its properties.
-	 */
-	if( stream->descriptor != -1 ) {
+	} 
+	else if( class->seek( streami, 0, SEEK_CUR ) == -1 ) {
 		/* Can we seek? If not, this is some kind of pipe.
 		 * 
 		 * We must call the class method directly: if we go via
 		 * vips_streami_seek() we'll trigger seek emulation on pipes.
 		 */
-		if( class->seek( streami, 0, SEEK_CUR ) == -1 ) {
-			VIPS_DEBUG_MSG( "    not seekable\n" );
-			streami->is_pipe = TRUE;
-		}
-
+		VIPS_DEBUG_MSG( "    not seekable\n" );
+		streami->is_pipe = TRUE;
+	} 
+	else if( (streami->length = vips_streami_size( streami )) == -1 ) {
 		/* Try and get the length, as long as we're seekable.
 		 */
-		if( !streami->is_pipe &&
-			(streami->length = vips_streami_size( streami )) == -1 )
-			return( -1 );
+		return( -1 );
 	}
 
 	/* If we can seek, we won't need to save header bytes.
