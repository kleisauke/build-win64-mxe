From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Thu, 17 Oct 2019 18:30:00 +0200
Subject: [PATCH 1/3] Add helpers to override the virtual stream functions


diff --git a/libvips/include/vips/stream.h b/libvips/include/vips/stream.h
index 1111111..2222222 100644
--- a/libvips/include/vips/stream.h
+++ b/libvips/include/vips/stream.h
@@ -161,6 +161,11 @@ typedef struct _VipsStreamInput {
 
 } VipsStreamInput;
 
+typedef ssize_t (*VipsStreamInputReadFn)( VipsStreamInput *, unsigned char *, size_t );
+typedef const void *(*VipsStreamInputMapFn)( VipsStreamInput *, size_t * );
+typedef gint64 (*VipsStreamInputSeekFn)( VipsStreamInput *, gint64 offset, int );
+typedef void (*VipsStreamInputMinimiseFn)( VipsStreamInput * );
+
 typedef struct _VipsStreamInputClass {
 	VipsStreamClass parent_class;
 
@@ -172,7 +177,7 @@ typedef struct _VipsStreamInputClass {
 	 *
 	 * -1 on error, 0 on EOF.
 	 */
-	ssize_t (*read)( VipsStreamInput *, unsigned char *, size_t );
+	VipsStreamInputReadFn read;
 
 	/* Map the entire stream into memory, for example with mmap(). Return
 	 * the base and size of the mapped area.
@@ -182,11 +187,11 @@ typedef struct _VipsStreamInputClass {
 	 *
 	 * NULL on error.
 	 */
-	const void *(*map)( VipsStreamInput *, size_t * );
+	VipsStreamInputMapFn map;
 
 	/* Seek to a certain position, args exactly as lseek(2).
 	 */
-	gint64 (*seek)( VipsStreamInput *, gint64 offset, int );
+	VipsStreamInputSeekFn seek;
 
 	/* Shut down anything that can safely restarted. For example, if
 	 * there's a fd that supports lseek(), it can be closed, since later 
@@ -195,7 +200,7 @@ typedef struct _VipsStreamInputClass {
 	 *
 	 * Non-restartable shutdown shuld be in _finalize().
 	 */
-	void (*minimise)( VipsStreamInput * );
+	VipsStreamInputMinimiseFn minimise;
 
 } VipsStreamInputClass;
 
@@ -208,6 +213,15 @@ VipsStreamInput *vips_stream_input_new_from_memory( const void *data,
 	size_t size );
 VipsStreamInput *vips_stream_input_new_from_options( const char *options );
 
+void vips_stream_input_set_custom_read_fn( VipsStreamInput *input, 
+	VipsStreamInputReadFn read_fn );
+void vips_stream_input_set_custom_map_fn( VipsStreamInput *input, 
+	VipsStreamInputMapFn map_fn );
+void vips_stream_input_set_custom_seek_fn( VipsStreamInput *input, 
+	VipsStreamInputSeekFn seek_fn );
+void vips_stream_input_set_custom_minimise_fn( VipsStreamInput *input, 
+	VipsStreamInputMinimiseFn minimise_fn );
+
 ssize_t vips_stream_input_read( VipsStreamInput *input, 
 	unsigned char *data, size_t length );
 const void *vips_stream_input_map( VipsStreamInput *input, size_t *length );
@@ -251,17 +265,20 @@ typedef struct _VipsStreamOutput {
 
 } VipsStreamOutput;
 
+typedef ssize_t (*VipsStreamOutputWriteFn)( VipsStreamOutput *, const unsigned char *, size_t );
+typedef void (*VipsStreamOutputFinishFn)( VipsStreamOutput * );
+
 typedef struct _VipsStreamOutputClass {
 	VipsStreamClass parent_class;
 
 	/* If defined, output some bytes with this. Otherwise use write().
 	 */
-	ssize_t (*write)( VipsStreamOutput *, const unsigned char *, size_t );
+	VipsStreamOutputWriteFn write;
 
 	/* A complete output image has been generated, so do any clearing up,
 	 * eg. copy the bytes we saved in memory to the output blob.
 	 */
-	void (*finish)( VipsStreamOutput * );
+	VipsStreamOutputFinishFn finish;
 
 } VipsStreamOutputClass;
 
@@ -270,6 +287,12 @@ GType vips_stream_output_get_type( void );
 VipsStreamOutput *vips_stream_output_new_from_descriptor( int descriptor );
 VipsStreamOutput *vips_stream_output_new_from_filename( const char *filename );
 VipsStreamOutput *vips_stream_output_new_memory( void );
+
+void vips_stream_output_set_custom_write_fn( VipsStreamOutput *output, 
+	VipsStreamOutputWriteFn write_fn );
+void vips_stream_output_set_custom_finish_fn( VipsStreamOutput *output, 
+	VipsStreamOutputFinishFn finish_fn );
+
 int vips_stream_output_write( VipsStreamOutput *output,
 	const unsigned char *data, size_t length );
 void vips_stream_output_finish( VipsStreamOutput *output );
diff --git a/libvips/iofuncs/stream.c b/libvips/iofuncs/stream.c
index 1111111..2222222 100644
--- a/libvips/iofuncs/stream.c
+++ b/libvips/iofuncs/stream.c
@@ -380,6 +380,42 @@ vips_stream_input_minimise_real( VipsStreamInput *input )
 		vips_stream_close( stream );
 }
 
+void
+vips_stream_input_set_custom_read_fn( VipsStreamInput *input, 
+	VipsStreamInputReadFn read_fn )
+{
+	VipsStreamInputClass *class = VIPS_STREAM_INPUT_GET_CLASS( input );
+
+	class->read = read_fn;
+}
+
+void
+vips_stream_input_set_custom_map_fn( VipsStreamInput *input, 
+	VipsStreamInputMapFn map_fn )
+{
+	VipsStreamInputClass *class = VIPS_STREAM_INPUT_GET_CLASS( input );
+
+	class->map = map_fn;
+}
+
+void
+vips_stream_input_set_custom_seek_fn( VipsStreamInput *input, 
+	VipsStreamInputSeekFn seek_fn )
+{
+	VipsStreamInputClass *class = VIPS_STREAM_INPUT_GET_CLASS( input );
+
+	class->seek = seek_fn;
+}
+
+void
+vips_stream_input_set_custom_minimise_fn( VipsStreamInput *input, 
+	VipsStreamInputMinimiseFn minimise_fn )
+{
+	VipsStreamInputClass *class = VIPS_STREAM_INPUT_GET_CLASS( input );
+
+	class->minimise = minimise_fn;
+}
+
 static void
 vips_stream_input_class_init( VipsStreamInputClass *class )
 {
@@ -407,6 +443,13 @@ vips_stream_input_class_init( VipsStreamInputClass *class )
 		G_STRUCT_OFFSET( VipsStreamInput, blob ),
 		VIPS_TYPE_BLOB );
 
+	VIPS_ARG_BOOL( class, "seekable", 4, 
+		_( "Seekable" ),
+		_( "stream supports seeking" ),
+		VIPS_ARGUMENT_OPTIONAL_INPUT, 
+		G_STRUCT_OFFSET( VipsStreamInput, seekable ),
+		FALSE );
+
 }
 
 static void
@@ -930,6 +973,24 @@ vips_stream_output_finish_real( VipsStreamOutput *output )
 	}
 }
 
+void
+vips_stream_output_set_custom_write_fn( VipsStreamOutput *output, 
+	VipsStreamOutputWriteFn write_fn )
+{
+	VipsStreamOutputClass *class = VIPS_STREAM_OUTPUT_GET_CLASS( output );
+
+	class->write = write_fn;
+}
+
+void
+vips_stream_output_set_custom_finish_fn( VipsStreamOutput *output, 
+	VipsStreamOutputFinishFn finish_fn )
+{
+	VipsStreamOutputClass *class = VIPS_STREAM_OUTPUT_GET_CLASS( output );
+
+	class->finish = finish_fn;
+}
+
 static void
 vips_stream_output_class_init( VipsStreamOutputClass *class )
 {

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Thu, 17 Oct 2019 18:35:00 +0200
Subject: [PATCH 2/3] Fix build


diff --git a/libvips/iofuncs/util.c b/libvips/iofuncs/util.c
index 1111111..2222222 100644
--- a/libvips/iofuncs/util.c
+++ b/libvips/iofuncs/util.c
@@ -1078,7 +1078,7 @@ vips__ftruncate( int fd, gint64 pos )
 	LARGE_INTEGER p;
 
 	p.QuadPart = pos;
-	if( vips__seek( fd, pos ) )
+	if( vips__seek( fd, pos, SEEK_SET ) )
 		return( -1 );
 	if( !SetEndOfFile( hFile ) ) {
                 vips_error_system( GetLastError(), "vips__ftruncate", 

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Fri, 18 Oct 2019 13:00:0 +0200
Subject: [PATCH 3/3] vips_stream_input_map now supports seekable streams


diff --git a/libvips/iofuncs/stream.c b/libvips/iofuncs/stream.c
index 1111111..2222222 100644
--- a/libvips/iofuncs/stream.c
+++ b/libvips/iofuncs/stream.c
@@ -646,10 +646,10 @@ vips_stream_input_read( VipsStreamInput *input,
 		}
 
 		/* We need to save bytes if we're in header mode and we can't
-		 * seek or map.
+		 * seek.
 		 */
 		if( input->header_bytes &&
-			(!input->seekable || !input->mappable) &&
+			!input->seekable &&
 			!input->decode &&
 			n > 0 ) 
 			g_byte_array_append( input->header_bytes, 
@@ -698,6 +698,35 @@ vips_stream_input_map( VipsStreamInput *input, size_t *length )
 		return( input->baseaddr );
 	}
 
+	/* An input that is seekable but doesn't supports mmap,
+	 * read() the whole thing and move it to a memory source.
+	 */
+	if( input->seekable ) {
+		GByteArray *bytes;
+		unsigned char *data;
+		ssize_t n;
+		size_t bytes_length;
+
+		bytes = g_byte_array_new();
+
+		VIPS_DEBUG_MSG( "    read() of entire source\n" );
+		if( vips_stream_input_rewind( input ) )
+			return( NULL );
+
+		while( (n = vips_stream_input_read( input, buffer, 4096 )) > 0 )
+			g_byte_array_append( bytes, buffer, n );
+
+		bytes_length = bytes->len;
+		data = g_byte_array_free( bytes, FALSE );
+		bytes = NULL;
+
+		input->blob = vips_blob_new( NULL, NULL, 0 );
+		vips_blob_set( input->blob,
+			(VipsCallbackFn) g_free, data, bytes_length );
+
+		return( vips_blob_get( input->blob, length ) );
+	}
+
 	/* Have to read() the whole thing. header_bytes will keep a copy of
 	 * the file.
 	 */
