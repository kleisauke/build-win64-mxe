This file is part of MXE. See LICENSE.md for licensing information.

Contains ad hoc patches for cross building.

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Sat, 2 Feb 2019 15:00:00 +0200
Subject: [PATCH 1/5] Add missing -liconv and -lintl to linker


diff --git a/glib/meson.build b/glib/meson.build
index 1111111..2222222 100644
--- a/glib/meson.build
+++ b/glib/meson.build
@@ -365,7 +365,7 @@ libglib_dep = declare_dependency(
   link_with : libglib,
   # thread_dep doesn't get pulled in from libglib atm,
   # see https://github.com/mesonbuild/meson/issues/1426
-  dependencies : [thread_dep, libintl],
+  dependencies : [thread_dep, libintl, libiconv],
   # We sadly need to export configinc here because everyone includes <glib/*.h>
   include_directories : [configinc, glibinc])
 
diff --git a/meson.build b/meson.build
index 1111111..2222222 100644
--- a/meson.build
+++ b/meson.build
@@ -1815,7 +1815,7 @@ glibconfig_conf.set10('G_HAVE_GROWING_STACK', growing_stack)
 # available in the actual runtime environment. On Windows, we always use
 # the built-in implementation
 iconv_opt = get_option('iconv')
-if host_system == 'windows'
+if host_system == 'windows' and not meson.is_cross_build()
   libiconv = []
   # We have a #include "win_iconv.c" in gconvert.c on Windows, so we don't need
   # any external library for it
@@ -1904,17 +1904,24 @@ endif
 # proxy-libintl subproject.
 # FIXME: glib-gettext.m4 has much more checks to detect broken/uncompatible
 # implementations. This could be extended if issues are found in some platforms.
-if cc.has_function('ngettext')
-  libintl = []
-  have_bind_textdomain_codeset = cc.has_function('bind_textdomain_codeset')
+# On Windows, just always use libintl.
+if host_system == 'windows'
+  libintl = [cc.find_library('intl')]
+  have_bind_textdomain_codeset = cc.has_function('bind_textdomain_codeset',
+                                                 dependencies : libintl)
 else
-  libintl = cc.find_library('intl', required : false)
-  if not libintl.found()
-    libintl = subproject('proxy-libintl').get_variable('intl_dep')
-    have_bind_textdomain_codeset = true  # proxy-libintl supports it
+  if cc.has_function('ngettext')
+    libintl = []
+    have_bind_textdomain_codeset = cc.has_function('bind_textdomain_codeset')
   else
-    have_bind_textdomain_codeset = cc.has_function('bind_textdomain_codeset',
-                                                   dependencies : libintl)
+    libintl = cc.find_library('intl', required : false)
+    if not libintl.found()
+      libintl = subproject('proxy-libintl').get_variable('intl_dep')
+      have_bind_textdomain_codeset = true  # proxy-libintl supports it
+    else
+      have_bind_textdomain_codeset = cc.has_function('bind_textdomain_codeset',
+                                                     dependencies : libintl)
+    endif
   endif
 endif
 
From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Mon, 13 May 2019 18:00:00 +0200
Subject: [PATCH 2/5] Disable some tests


diff --git a/gio/tests/meson.build b/gio/tests/meson.build
index 1111111..2222222 100644
--- a/gio/tests/meson.build
+++ b/gio/tests/meson.build
@@ -435,7 +435,7 @@ gdbus_example_objectmanager_sources = files(
   'gdbus-example-objectmanager-server.c',
 )
 
-if cc.get_id() != 'msvc' and cc.get_id() != 'clang-cl'
+if host_machine.system() != 'windows' and cc.get_id() != 'clang-cl'
   test_extra_programs += {
     # These three are manual-run tests because they need a session bus but don't bring one up themselves
     # FIXME: these build but don't seem to work!
@@ -548,7 +548,7 @@ if installed_tests_enabled
   endforeach
 endif
 
-if not meson.is_cross_build() or meson.has_exe_wrapper()
+if not (meson.is_cross_build() or meson.has_exe_wrapper()) and host_machine.system() != 'windows'
 
   plugin_resources_c = custom_target('plugin-resources.c',
     input : 'test4.gresource.xml',

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Mon, 25 Nov 2019 00:20:00 +0100
Subject: [PATCH 3/5] Fix build error with llvm-mingw


diff --git a/glib/gnulib/meson.build b/glib/gnulib/meson.build
index 1111111..2222222 100644
--- a/glib/gnulib/meson.build
+++ b/glib/gnulib/meson.build
@@ -182,7 +182,7 @@ endforeach
 nan_tmpl = '''#include <math.h>
               #if __GNUC__ >= 4
               # undef @0@
-              # define @0@(x) __builtin_isnan ((@1@)(x))
+              # define @0@(x) __builtin_@0@ ((@1@)(x))
               #else
               # undef @0@
               # define @0@(x) isnan ((@1@)(x))
@@ -203,6 +203,14 @@ math_h_config.set ('HAVE_ISNANL', links ? 1 : 0)
 math_h_config.set ('HAVE_ISNANL_IN_LIBC', links ? 1 : 0)
 set_variable ('have_isnanl', links)
 
+links = cc.links (nan_tmpl.format ('isnanf', 'float'),
+                  dependencies : [libm])
+math_h_config.set ('HAVE_ISNANF', links ? 1 : 0)
+math_h_config.set ('HAVE_ISNANF_IN_LIBC', links ? 1 : 0)
+set_variable ('have_isnanf', links)
+
+math_h_config.set ('REPLACE_ISNAN', have_isnand and have_isnanl and have_isnanf ? 0 : 1)
+
 links = cc.links ('''#include <math.h>
                      double x;
                      int y;
@@ -303,7 +311,7 @@ inf_tmpl = '''#include <math.h>
 
 other_needed_math_sources = []
 # Some compilers may not have isfinite, isinf available
-foreach f: ['isfinite', 'isinf', 'isnan', 'isnanf', 'signbit']
+foreach f: ['isfinite', 'isinf', 'signbit']
   links = cc.links (inf_tmpl.format('@0@'.format(f)),
                     dependencies : [libm])
   math_h_config.set ('HAVE_@0@'.format(f.to_upper()), links ? 1 : 0)
@@ -313,7 +321,7 @@ foreach f: ['isfinite', 'isinf', 'isnan', 'isnanf', 'signbit']
   if not links
     if f == 'signbit'
       other_needed_math_sources += [ 'signbitd.c', 'signbitf.c', 'signbitl.c' ]
-    elif f != 'isfinite' and f != 'isnan'
+    elif f != 'isfinite'
       other_needed_math_sources += [ '@0@.c'.format(f) ]
     endif
   endif

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Mon, 25 Nov 2019 10:10:00 +0100
Subject: [PATCH 4/5] Fix non-literal format string issues

Clang errors out when using -Werror=format-nonliteral since the definition of
g_strdup_vprintf() uses va_list. Clang warns for this whereas GCC doesn't do
that for va_list arguments.

diff --git a/gio/gregistrysettingsbackend.c b/gio/gregistrysettingsbackend.c
index 1111111..2222222 100644
--- a/gio/gregistrysettingsbackend.c
+++ b/gio/gregistrysettingsbackend.c
@@ -201,6 +201,7 @@ trace (const char *format,
  * equivalent function for g_warning because none of the registry errors can
  * result from programmer error (Microsoft programmers don't count), instead
  * they will mostly occur from people messing with the registry by hand. */
+G_GNUC_PRINTF (2, 3)
 static void
 g_message_win32_error (DWORD        result_code,
                        const gchar *format,
@@ -312,7 +313,7 @@ handle_read_error (LONG         result,
 {
   /* file not found means key value not set, this isn't an error for us. */
   if (result != ERROR_FILE_NOT_FOUND)
-    g_message_win32_error (result, "Unable to query value %s/%s: %s.\n",
+    g_message_win32_error (result, "Unable to query value %s: %s.\n",
                            path_name, value_name);
 }
 
diff --git a/gmodule/gmodule-win32.c b/gmodule/gmodule-win32.c
index 1111111..2222222 100644
--- a/gmodule/gmodule-win32.c
+++ b/gmodule/gmodule-win32.c
@@ -39,6 +39,7 @@
 #include <sys/cygwin.h>
 #endif
 
+G_GNUC_PRINTF (1, 2)
 static void
 set_error (const gchar *format,
 	   ...)
@@ -83,7 +84,7 @@ _g_module_open (const gchar *file_name,
   /* suppress error dialog */
   success = SetThreadErrorMode (SEM_NOOPENFILEERRORBOX | SEM_FAILCRITICALERRORS, &old_mode);
   if (!success)
-    set_error ("");
+    set_error ("%s", "");
 
   /* When building for UWP, load app asset DLLs instead of filesystem DLLs.
    * Needs MSVC, Windows 8 and newer, and is only usable from apps. */
@@ -117,7 +118,7 @@ _g_module_close (gpointer handle,
 {
   if (handle != null_module_handle)
     if (!FreeLibrary (handle))
-      set_error ("");
+      set_error ("%s", "");
 }
 
 static gpointer
@@ -176,7 +177,7 @@ _g_module_symbol (gpointer     handle,
     p = GetProcAddress (handle, symbol_name);
 
   if (!p)
-    set_error ("");
+    set_error ("%s", "");
 
   return p;
 }

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Sat, 15 Feb 2020 19:00:00 +0100
Subject: [PATCH 5/5] Fixes for the llvm-mingw ARM/ARM64 build


diff --git a/glib/gbacktrace.h b/glib/gbacktrace.h
index 1111111..2222222 100644
--- a/glib/gbacktrace.h
+++ b/glib/gbacktrace.h
@@ -61,7 +61,7 @@ void g_on_error_stack_trace (const gchar *prg_name);
 #  define G_BREAKPOINT()        G_STMT_START{ __debugbreak(); }G_STMT_END
 #elif defined (__alpha__) && !defined(__osf__) && defined (__GNUC__) && __GNUC__ >= 2
 #  define G_BREAKPOINT()        G_STMT_START{ __asm__ __volatile__ ("bpt"); }G_STMT_END
-#elif defined (__APPLE__)
+#elif g_macro__has_builtin(__builtin_trap)
 #  define G_BREAKPOINT()        G_STMT_START{ __builtin_trap(); }G_STMT_END
 #else   /* !__i386__ && !__alpha__ */
 #  define G_BREAKPOINT()        G_STMT_START{ raise (SIGTRAP); }G_STMT_END
diff --git a/glib/valgrind.h b/glib/valgrind.h
index 1111111..2222222 100644
--- a/glib/valgrind.h
+++ b/glib/valgrind.h
@@ -130,11 +130,11 @@
 #  define PLAT_x86_darwin 1
 #elif defined(__APPLE__) && defined(__x86_64__)
 #  define PLAT_amd64_darwin 1
-#elif (defined(__MINGW32__) && !defined(__MINGW64__)) \
+#elif (defined(__MINGW32__) && !defined(__MINGW64__) && !defined(__arm__)) \
       || defined(__CYGWIN32__) \
       || (defined(_WIN32) && defined(_M_IX86))
 #  define PLAT_x86_win32 1
-#elif defined(__MINGW64__) \
+#elif (defined(__MINGW64__) && !defined(__aarch64__)) \
       || (defined(_WIN64) && defined(_M_X64))
 #  define PLAT_amd64_win64 1
 #elif defined(__linux__) && defined(__i386__)
