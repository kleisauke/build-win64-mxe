This file is part of MXE. See LICENSE.md for licensing information.

Contains ad hoc patches for cross building.

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Sat, 2 Feb 2019 15:00:00 +0200
Subject: [PATCH 1/3] Add missing -liconv and -lintl to linker


diff --git a/meson.build b/meson.build
index 1111111..2222222 100644
--- a/meson.build
+++ b/meson.build
@@ -1694,7 +1694,7 @@ glibconfig_conf.set10('G_HAVE_GROWING_STACK', growing_stack)
 # available in the actual runtime environment. On Windows, we always use
 # the built-in implementation
 iconv_opt = get_option('iconv')
-if host_system == 'windows'
+if host_system == 'windows' and not meson.is_cross_build()
   libiconv = []
   # We have a #include "win_iconv.c" in gconvert.c on Windows, so we don't need
   # any external library for it
@@ -1783,17 +1783,24 @@ endif
 # proxy-libintl subproject.
 # FIXME: glib-gettext.m4 has much more checks to detect broken/uncompatible
 # implementations. This could be extended if issues are found in some platforms.
-if cc.has_function('ngettext')
-  libintl = []
-  have_bind_textdomain_codeset = cc.has_function('bind_textdomain_codeset')
+# On Windows, just always use libintl.
+if host_system == 'windows'
+  libintl = [cc.find_library('intl')]
+  have_bind_textdomain_codeset = cc.has_function('bind_textdomain_codeset',
+                                                 dependencies : libintl)
 else
-  libintl = cc.find_library('intl', required : false)
-  if not libintl.found()
-    libintl = subproject('proxy-libintl').get_variable('intl_dep')
-    have_bind_textdomain_codeset = true  # proxy-libintl supports it
+  if cc.has_function('ngettext')
+    libintl = []
+    have_bind_textdomain_codeset = cc.has_function('bind_textdomain_codeset')
   else
-    have_bind_textdomain_codeset = cc.has_function('bind_textdomain_codeset',
-                                                   dependencies : libintl)
+    libintl = cc.find_library('intl', required : false)
+    if not libintl.found()
+      libintl = subproject('proxy-libintl').get_variable('intl_dep')
+      have_bind_textdomain_codeset = true  # proxy-libintl supports it
+    else
+      have_bind_textdomain_codeset = cc.has_function('bind_textdomain_codeset',
+                                                     dependencies : libintl)
+    endif
   endif
 endif
 
diff --git a/glib/meson.build b/glib/meson.build
index 1111111..2222222 100644
--- a/glib/meson.build
+++ b/glib/meson.build
@@ -366,7 +366,7 @@ libglib_dep = declare_dependency(
   link_with : libglib,
   # thread_dep doesn't get pulled in from libglib atm,
   # see https://github.com/mesonbuild/meson/issues/1426
-  dependencies : [thread_dep, libintl],
+  dependencies : [thread_dep, libintl, libiconv],
   # We sadly need to export configinc here because everyone includes <glib/*.h>
   include_directories : [configinc, glibinc])
 
From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Mon, 13 May 2019 17:00:00 +0200
Subject: [PATCH 2/3] Always build gio, gmodule and gthread static


diff --git a/gio/giomodule.c b/gio/giomodule.c
index 1111111..2222222 100644
--- a/gio/giomodule.c
+++ b/gio/giomodule.c
@@ -1041,25 +1041,6 @@ extern GType _g_win32_network_monitor_get_type (void);
 
 static HMODULE gio_dll = NULL;
 
-#ifdef DLL_EXPORT
-
-BOOL WINAPI DllMain (HINSTANCE hinstDLL,
-                     DWORD     fdwReason,
-                     LPVOID    lpvReserved);
-
-BOOL WINAPI
-DllMain (HINSTANCE hinstDLL,
-	 DWORD     fdwReason,
-	 LPVOID    lpvReserved)
-{
-  if (fdwReason == DLL_PROCESS_ATTACH)
-      gio_dll = hinstDLL;
-
-  return TRUE;
-}
-
-#endif
-
 void *
 _g_io_win32_get_module (void)
 {

diff --git a/gio/meson.build b/gio/meson.build
index 1111111..2222222 100644
--- a/gio/meson.build	
+++ b/gio/meson.build
@@ -796,7 +796,7 @@ else
   gio_dtrace_hdr = []
 endif
 
-libgio = library('gio-2.0',
+libgio = static_library('gio-2.0',
   gioenumtypes_h, gioenumtypes_c, gnetworking_h, gio_sources,
   gio_dtrace_hdr, gio_dtrace_obj,
   objects : internal_objects,

diff --git a/gmodule/meson.build b/gmodule/meson.build
index 1111111..2222222 100644
--- a/gmodule/meson.build
+++ b/gmodule/meson.build
@@ -95,7 +95,7 @@ if host_system == 'windows'
   gmodule_sources += [gmodule_win_res]
 endif
 
-libgmodule = library('gmodule-2.0',
+libgmodule = static_library('gmodule-2.0',
   sources : gmodule_sources,
   version : library_version,
   soversion : soversion,

diff --git a/gthread/meson.build b/gthread/meson.build
index d4fca40..e70e32a 100644
--- a/gthread/meson.build
+++ b/gthread/meson.build
@@ -12,7 +12,7 @@ if host_system == 'windows'
   gthread_sources += [gthread_win_res]
 endif
 
-libgthread = library('gthread-2.0',
+libgthread = static_library('gthread-2.0',
   sources : gthread_sources,
   version : library_version,
   soversion : soversion,

From 0000000000000000000000000000000000000000 Mon Sep 17 00:00:00 2001
From: Kleis Auke Wolthuizen <github@kleisauke.nl>
Date: Mon, 13 May 2019 18:00:00 +0200
Subject: [PATCH 3/3] Disable some tests


diff --git a/gio/tests/meson.build b/gio/tests/meson.build
index 1111111..2222222 100644
--- a/gio/tests/meson.build
+++ b/gio/tests/meson.build
@@ -379,7 +379,7 @@ test_extra_programs += {
   },
 }
 
-if cc.get_id() != 'msvc'
+if host_system != 'windows'
   test_extra_programs += {
     # These three are manual-run tests because they need a session bus but don't bring one up themselves
     # FIXME: these build but don't seem to work!
@@ -459,7 +459,7 @@ if installed_tests_enabled
   install_data('static-link.py', install_dir : installed_tests_execdir)
 endif
 
-if not meson.is_cross_build() or meson.has_exe_wrapper()
+if not (meson.is_cross_build() or meson.has_exe_wrapper()) and host_system != 'windows'
 
   plugin_resources_c = custom_target('plugin-resources.c',
     input : 'test4.gresource.xml',
